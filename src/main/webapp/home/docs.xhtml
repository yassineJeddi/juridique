
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">Documentation</ui:define>
    
    <ui:define name="head">
        <style type="text/css">
            .docs h1 {
                margin-top: 30px;
            }
            
            .docs h1:first-child {
                margin-top: 0;
            }
            
            .docs p,
            .docs li {
                line-height: 1.5;
            }
            
            .docs pre {
                font-family: monospace;
                background-color: #141e27;
                color: #d8d8d8;
                padding: 1em;
                font-size: 14px;
                border-radius: 3px;
                overflow: auto;
            }
        </style>
    </ui:define>

    <ui:define name="content">
    
        <div class="ui-g">
            <div class="ui-g-12">
                <div class="card docs"> 
                    <h1>Getting Started</h1>
                    <p>First of all, you'd need SASS to compile CSS, proceed to <a href="https://sass-lang.com/install">SASS Installation</a> before beginning if you do not have SASS available in your command line.</p>
                    <p>Demo project has an integrated jetty plugin so running the sample is easy as building the css first followed by the mvn jetty:run command.</p>
<pre>
sass --update src/main/webapp/resources/ --sourcemap=none
mvn jetty:run
</pre> 
                    <p>Navigate to http://localhost:8080/apollo to view the demos which is exactly same as the live version.</p>                 
                    
                    <h1>Layout Template</h1>
                    <p>Apollo utilizes <a href="http://docs.oracle.com/javaee/6/tutorial/doc/giqxp.html">JSF templating APIs</a> and provides a main template.xhtml along with additional <i>topbar</i>, <i>menu</i> and <i>footer</i> fragments for the base layout. 
                        These xhtml files must be placed under WEB-INF folder and client pages should reference the template.xhtml as their template. 
                        Provided empty.xhtml is a sample content page using the main template.xhtml that defines "content" as the main ui:define placeholder. By default template defines 4 placeholders 
                        (page title, head content, breadcrumb path and actual content) to insert content and you can add more per your requirements.</p>

<pre>
&lt;h:body&gt;
    
    &lt;div class="layout-wrapper layout-\#{guestPreferences.layoutMode}"&gt;
        
        &lt;ui:include src="topbar.xhtml" /&gt;
        &lt;ui:include src="menu.xhtml" /&gt;
        
        &lt;div class="layout-content"&gt;
            &lt;div class="layout-breadcrumb"&gt;
                &lt;ul&gt;
                    &lt;li&gt;
                        &lt;p:link outcome="/dashboard"&gt;
                            &lt;i class="fa fa-home" /&gt;
                        &lt;/p:link&gt;
                    &lt;/li&gt;
                    &lt;li&gt;/&lt;/li&gt;
                    &lt;ui:insert name="breadcrumb" /&gt;
                &lt;/ul&gt;
                
                &lt;div class="layout-breadcrumb-options"&gt;
                    &lt;a href="#" title="Backup"&gt;&lt;i class="fa fa-cloud-upload"&gt;&lt;/i&gt;&lt;/a&gt;
                    &lt;a href="#" title="Bookmark"&gt;&lt;i class="fa fa-bookmark"&gt;&lt;/i&gt;&lt;/a&gt;
                    &lt;a href="#" title="Logout"&gt;&lt;i class="fa fa-sign-out"&gt;&lt;/i&gt;&lt;/a&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            
            &lt;div class="layout-content-container"&gt;
                &lt;ui:insert name="content"/&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        
        &lt;ui:include src="footer.xhtml" /&gt;
        
        &lt;div class="layout-mask"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/h:body&gt;
</pre>
                        
                    <p>Sample page below uses the main template from Apollo.</p>
<pre>
&lt;ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/template.xhtml"&gt;
                
    &lt;ui:define name="title"&gt;Test Page&lt;/ui:define&gt;

    &lt;ui:define name="content"&gt;
        Content goes here
    &lt;/ui:define&gt;
&lt;/ui:composition&gt;
</pre>
                    
                    <p>Other required resources of the layout are the css, js and images that are located inside resources/apollo-layout folder, simply copy the apollo-layout folder to your %WEB-APP-FOLDER%/resources folder 
                        so that final path would be %WEB-APP-FOLDER%/resources/apollo-layout/. Please refer to demo app or maven project of the demo app as the reference.</p>
                    
                    <h1>GuestPreferences Bean</h1>
                    <p>GuestPreferences is a simple session scoped bean to keep the user customizations of the layout and template xhtml files
                    refer to this bean to dynamically change their behavior such as menu mode or theme. This bean is not necessary to run the Apollo
                    and only used for demo purposes however in your application we suggest using a similar bean so that each user can define their own UI experience
                    by customizing the layout. For example template.xhtml includes layout color depending on a user preference using an EL expression.</p>
<pre>
&lt;h:outputStylesheet name="css/layout-\#{guestPreferences.theme}.css" library="apollo-layout" /&gt;   
</pre>               
                    <p>In your application, you may also need a similar bean to make the template dynamic or choose a static color with;</p>  
                    
<pre>
&lt;h:outputStylesheet name="css/layout-blue.css" library="apollo-layout" /&gt;   
</pre>   
                    <p>Source code of GuestPreferences.</p>
<pre>
package org.primefaces.apollo.view;

import java.io.Serializable;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;

@ManagedBean
@SessionScoped
public class GuestPreferences implements Serializable {
    
    private String color = "blue";
    
    private boolean dark = false;
        
    private String layoutMode = "horizontal";

	public void updateTheme(String color, boolean dark) {
		this.color = color;
        this.dark = dark;
	}
    
    public String getTheme() {
        return this.color + "-" + (this.dark ? "dark" : "light");
    }
    
    public void changeScheme() {
        this.dark = !this.dark;
        this.updateTheme(this.color, this.dark);
    }
        
    public String getLayoutMode() {
        return this.layoutMode;
    }
    
    public void setLayoutMode(String value) {
        this.layoutMode = value;
    }
    
    public boolean isDark() {
        return this.dark;
    }
    
    public void setDark(boolean value) {
        this.dark = dark;
    }
}
</pre>
                    
                    <h1>Theme</h1>
                    <p>Apollo provides 16 PrimeFaces themes out of the box, setup of a theme simple as including the theme jar in your classpath and defining primefaces.THEME context parameter in web.xml such as "apollo-blue-light". Full list of 
                    available themes are;</p>
                    
                    <ul>
                        <li>apollo-blue-light</li>
                        <li>apollo-blue-dark</li>
                        <li>apollo-cyan-light</li>
                        <li>apollo-cyan-dark</li>
                        <li>apollo-green-light</li>
                        <li>apollo-green-dark</li>
                        <li>apollo-indigo-light</li>
                        <li>apollo-indigo-dark</li>
                        <li>apollo-orange-light</li>
                        <li>apollo-orange-dark</li>
                        <li>apollo-pink-light</li>
                        <li>apollo-pink-dark</li>
                        <li>apollo-purple-light</li>
                        <li>apollo-purple-dark</li>
                        <li>apollo-yellow-light</li>
                        <li>apollo-yellow-dark</li>
                    </ul>
                    
                    <p>A custom theme can be developed by the following steps.</p>
                    <ul>
                        <li>Create a custom theme folder such as primefaces-apollo-myown-light under webapp/resources and place an empty theme.scss inside.</li>
                        <li>Copy the sass folder from the distribution to webapp/resources.</li>
                        <li>Define the variables listed below and import the <i>/sass/theme/_theme.scss</i> file.</li>
                        <li>Build the scss to generate css.</li>
                        <li>Set primefaces.THEME context parameter as <i>apollo-myown</i></li>
                        <li>Either bundle the css in a jar file or serve from webapp/resources/primefaces-apollo-myown folder</li>
                    </ul>
                    
                    <p>Here are the variables required to create a theme.</p>
                        
<pre>
$primaryColor: #7E57C2;
$primaryTextColor: #ffffff;

@import '../sass/theme/_theme_light.scss';

</pre> 

                    <p>If you are building a dark theme, import the _theme_dark.scss instead of _theme_light.scss so dark version would be;</p>
                    
<pre>
$primaryColor: #7E57C2;
$primaryTextColor: #ffffff;

@import '../sass/theme/_theme_dark.scss';

</pre> 
                        
                    <p> An example sass command to compile the css would be;</p>
                        
<pre>
sass src/main/webapp/resources/primefaces-apollo-myown-light/theme.scss src/main/webapp/resources/primefaces-apollo-myown-light/theme.css  --sourcemap=none
</pre> 

                    <p>Watch mode is handy to avoid compiling everytime when a change is made, instead use the following command
                    so that sass generates the file whenever you make a customization. This builds all css files whenever a change is made to any scss file.</p>
<pre>
sass -w src/main/webapp/resources/ --sourcemap=none
</pre> 

                    <h1>Layout</h1>
                    <p>Layout customization is similar to theme method.</p>
                    <ul>
                        <li>Choose a layout name such as layout-myown.</li>
                        <li>Create an empty file named layout-myown.scss inside resources/apollo-layout/css folder.</li>
                        <li>Copy the sass folder from the distribution to webapp/resources.</li>
                        <li>Define the variables listed below and import the <i>/sass/layout/_layout.scss</i> file.</li>
                        <li>Build the scss to generate css</li>
                        <li>Serve the css by importing it using a link tag or h:outputStylesheet.</li>
                    </ul>

                    <p>Here are the variables required to create a layout.</p>
                        
<pre>
$primaryColor:#39a3f4;
$primaryTextColor:#ffffff;
$menuBgColor:#ffffff;
$menuitemTextColor:#424242;
$submenuActiveBgColor:#ffffff;
$menuItemHoverTextColor:#39a3f4;
$menuItemActiveTextColor:#39a3f4;

$bodyBgColor:#EEF2F6;
$textColor:#424242;
$textSecondaryColor:#7a7a7a;
$placeholderColor:#a0a0a0;
$dividerColor:#dddddd;

@import '../../sass/layout/_layout.scss';

</pre> 
    
                    <h1>SASS Variables</h1>
                    <p>In case you'd like to customize common variables, the _common.scss under sass variables folder is where the core variables (e.g. font size, paddings) for the layout are defined.</p>
<pre>
$fontFamily:"Source Sans Pro",Arial,sans-serif;
$fontSize:14px;
$borderRadius:2px;
$transitionDuration:.3s;

/* Predefined Colors */
$blue:#39a3f4;
$green:#6ebc3b;
$purple:#7E57C2;
$cyan:#26C6DA;
$pink:#EC407A;
$indigo:#5C6BC0;
$orange:#f6a821;
$yellow:#ffc800;
$red:#EF5350;
$white:#ffffff;
$black:#000000;

</pre> 

                    <p>_theme.scss files contains the shared variables of the PrimeFaces theme, there are two versions this file, one is for light themes
                    and other is for dark themes. Here is the dark version;</p>
<pre>
@import './common';

$textColor:#d8d8d8;
$textSecondaryColor:#acacac;
$dividerColor:#121213;

/* Icons */
$iconFontSize:13px;
$iconWidth:16px;

/* Error */
$errorColor:#EF5350;

/* Header */
$headerPadding:6px 12px;
$headerBgColor:#1b3548;
$headerBorderColor:#121213;
$headerTextColor:#9fadb7;
$headerHoverBgColor:#485d6c;
$headerHoverTextColor:#ffffff;
$headerIconColor:#9fadb7;
$headerIconHoverColor:#ffffff;

/* Contents */
$contentPadding:6px 12px;
$contentBorderColor:#121213;
$contentBgColor:#1c2937;

/* Forms */
$inputBgColor:#141e27;
$inputPadding:6px;
$inputBorderColor:#121213;
$inputHoverBorderColor:$primaryColor;

/* Buttons */
$toggleButtonBgColor:#323e4b;

/* List Items */
$listItemPadding:6px 12px;

/* Messages */
$infoMessageBgColor:#39A3F4;
$infoMessageTextColor:#ffffff;
$warnMessageBgColor:#FFC800;
$warnMessageTextColor:#141d26;
$errorMessageBgColor:#EF5350;
$errorMessageTextColor:#ffffff;
$fatalMessageBgColor:#E73E51;
$fatalMessageTextColor:#ffffff;

/* Data */
$datatableCellBorderColor:#121213;
$datableEvenRowBgColor:#15222F;

/* TabView */
$tabHeaderPadding:8px 12px;

/* Menus */
$menuBgColor:#243447;
</pre>

                    <h1>Menu</h1>    
                    <p>Menu is a regular JSF component that supports PrimeFaces MenuModel API allowing both declarative and programmatic approaches.</p>
<pre>
xmlns:pa="http://primefaces.org/apollo"

&lt;pa:menu&gt;
&lt;/pa:menu&gt;
</pre>  
                    <p>Menu has 4 modes; static, overlay, horizontal and slim. Layout wrapper element in template.xhtml is used to define which mode to use by adding specific classes.</p>
                    <ul>
                        <li>"layout-wrapper layout-static": Static Menu</li>
                        <li>"layout-wrapper layout-overlay": Overlay Menu</li>
                        <li>"layout-wrapper layout-slim": Slim Menu</li>
                        <li>"layout-wrapper layout-horizontal": Horizontal Menu</li>
                    </ul>
                    
                    <p>Layout mode can be dynamic using an EL expression as well using an example bean called userPreferences.</p>
<pre>
&lt;div class="layout-wrapper \#{userPreferences.layout}"&gt;
...
&lt;/div&gt;
</pre>

                    <h1>Icons</h1>
                    <p>Apollo Layout uses font awesome icons for layout so enable font awesome support in PrimeFaces by setting primefaces.FONT_AWESOME context parameter in web.xml as true. If your PrimeFaces version 
                    does not have the font awesome integration, include the font-awesome manually in your application.</p>

                    <h1>Card</h1>
                    <p>Card is a section to group content and layout provides a built-in css for it. Apply .card style class to your container to use it. If the
                    card has a title defined with h1 tag, add card-w-title to adjust paddings.</p>
<pre>
&lt;div class="card"&gt;
    Content here
&lt;/div&gt;

&lt;div class="card card-w-title"&gt;
    &lt;h1&gt;Card with Title&lt;h1&gt;
    Content here
&lt;/div&gt;
</pre>  

                    <h1>Grid CSS</h1>
                    <p>Apollo uses new PrimeFaces Grid CSS (ui-g-*) throughout the samples, we strongly suggest using Grid CSS as your layout framework as it is well tested and supported by PrimeFaces. Grid CSS 
                    is automatically included on newer versions however if your PrimeFaces version is older than 5.3.14, add the provided grid.css file under /apollo-layout/css/ folder to your template manually.</p> 
                    
                    <h1>Tips</h1>
                    <ul>
                        <li>Familiarity with <a href="http://sass-lang.com/">SASS</a> is required to make customizations to the layout and theme.</li>
                        <li>Demo application war and the maven project tag are included in distribution however you don't necessarily need them to install Apollo, the actual artifacts required are the layout zip file and the theme jar.</li>
                        <li>Sample demo application war includes the JSF libraries so it is suggested to remove them from the war file when you deploy to an appserver.</li>
                        <li>When running the maven project, you need to build the sass with (sass --update src/main/webapp/resources/ --sourcemap=none) command.</li>
                    </ul>
                    
                    <h1>Migration Guide</h1>
                    <p>2.0.1 to 2.0.2</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                    
                    <p>2.0.0 to 2.0.1</p>
                    <ul>
                        <li>Update layout.js and layout css files</li>
                        <li>Replace theme jar with new jar</li>
                    </ul>
                </div>
            </div>
        </div>
        
    </ui:define>

</ui:composition>